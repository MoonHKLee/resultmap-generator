package moonhyuk.lee.resultmap.generator;

import com.google.auto.service.AutoService;
import org.springframework.data.annotation.Id;
import org.springframework.data.relational.core.mapping.Column;
import org.springframework.data.relational.core.mapping.MappedCollection;
import org.springframework.data.relational.core.mapping.Table;

import javax.annotation.processing.*;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.*;
import javax.lang.model.type.DeclaredType;
import javax.tools.Diagnostic;
import javax.tools.FileObject;
import javax.tools.JavaFileObject;
import javax.tools.StandardLocation;
import java.io.IOException;
import java.io.Writer;
import java.util.Set;

/**
 * 컴파일 타임에 @Table, @Embeddable 클래스를 스캔하여
 * MyBatis <resultMap> XML을 자동 생성하는 Annotation Processor 예시.
 */
@AutoService(Processor.class)
public class MyBatisResultMapProcessor extends AbstractProcessor {

    private Messager messager;
    private MapperXmlGenerator mapperXmlGenerator;
    private MapperInterfaceGenerator mapperInterfaceGenerator;

    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);
        this.messager = processingEnv.getMessager();

        // 생성 로직을 담당할 하위 클래스들 초기화
        this.mapperXmlGenerator = new MapperXmlGenerator(processingEnv, messager);
        this.mapperInterfaceGenerator = new MapperInterfaceGenerator(processingEnv, messager);
    }

    /**
     * 어떤 애노테이션을 처리할 것인지 지정.
     */
    @Override
    public Set<String> getSupportedAnnotationTypes() {
        return Set.of(
                Table.class.getCanonicalName(),
                Embeddable.class.getCanonicalName()
        );
    }

    /**
     * 자바 버전
     */
    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }

    /**
     * 애노테이션 처리 로직
     */
    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        messager.printMessage(Diagnostic.Kind.NOTE, "Processing annotations...");

        // @Table 달린 클래스
        Set<? extends Element> tableElements = roundEnv.getElementsAnnotatedWith(Table.class);
        messager.printMessage(Diagnostic.Kind.NOTE, "Found @Table elements: " + tableElements.size());

        // @Embeddable 달린 클래스
        Set<? extends Element> embeddableElements = roundEnv.getElementsAnnotatedWith(Embeddable.class);
        messager.printMessage(Diagnostic.Kind.NOTE, "Found @Embeddable elements: " + embeddableElements.size());

        if (tableElements.isEmpty() && embeddableElements.isEmpty()) {
            return false; // 처리할 것이 없으면 종료
        }

        // MyBatis mapper XML 내용을 생성
        String namespace = "mapper.AutoGeneratedMapper";
        String xmlContent = mapperXmlGenerator.generateMapperXml(namespace, tableElements, embeddableElements);

        // MyBatis Mapper 인터페이스 내용을 생성
        String interfaceContent = mapperInterfaceGenerator.generateMapperInterface();

        // 실제 파일로 기록
        writeXmlFile(xmlContent);
        writeMapperInterfaceFile(interfaceContent);

        // 해당 애노테이션을 다른 Processor가 처리하지 않아도 된다면 true 리턴
        return true;
    }

    /**
     * CLASS_OUTPUT 경로에 XML 파일을 생성/기록
     */
    private void writeXmlFile(String xmlContent) {
        try {
            FileObject classFile = processingEnv.getFiler()
                    .createResource(StandardLocation.CLASS_OUTPUT, "", "mapper/AutoGeneratedMapper.xml");

            try (Writer writer = classFile.openWriter()) {
                writer.write(xmlContent);
            }
            messager.printMessage(Diagnostic.Kind.NOTE, "Generated XML file at CLASS_OUTPUT: " + classFile.toUri());
        } catch (IOException e) {
            error("Failed to write XML resource: " + e.getMessage());
        }
    }

    /**
     * BASIC 패키지(기본 패키지)에 Java 인터페이스 파일 생성/기록
     */
    private void writeMapperInterfaceFile(String interfaceContent) {
        try {
            JavaFileObject interfaceFile = processingEnv.getFiler()
                    .createSourceFile("mapper.AutoGeneratedMapper");

            try (Writer writer = interfaceFile.openWriter()) {
                writer.write(interfaceContent);
            }
            messager.printMessage(Diagnostic.Kind.NOTE, "Generated Java interface at: " + interfaceFile.toUri());
        } catch (IOException e) {
            error("Failed to write Java interface resource: " + e.getMessage());
        }
    }

    private void error(String msg) {
        messager.printMessage(Diagnostic.Kind.ERROR, msg);
    }
}

